---
import type { HTMLInputTypeAttribute } from "@utils/types";

import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const fields: Array<{
  placeholder: string;
  name: string;
  type: HTMLInputTypeAttribute;
  label: string;
  autocomplete?: string;
}> = [
  {
    autocomplete: "name",
    placeholder: " ",
    type: "text",
    name: "name",
    label: t("contactForm.fields.name"),
  },
  {
    autocomplete: "email",
    placeholder: " ",
    type: "email",
    name: "email",
    label: t("contactForm.fields.email"),
  },
  {
    autocomplete: "organization",
    placeholder: " ",
    type: "text",
    name: "company",
    label: t("contactForm.fields.company"),
  },
  {
    autocomplete: "tel",
    placeholder: " ",
    type: "tel",
    name: "phone",
    label: t("contactForm.fields.phone"),
  },
];
---

<form id="form">
  <h2 class="font-display text-base font-semibold text-neutral-950">
    {t("contactForm.title")}
  </h2>
  <div class="isolate mt-6 -space-y-px rounded-2xl bg-white">
    {
      fields.map(({ label, ...field }, index) => (
        <div class="group relative z-0 transition-all focus-within:z-10">
          <input
            required
            id={`:S${index}:`}
            class="peer block w-full border border-neutral-300 bg-transparent px-6 pb-4 pt-12 text-base/6 text-neutral-950 ring-4 ring-transparent transition focus:border-neutral-950 focus:outline-none focus:ring-neutral-950/5 group-first:rounded-t-2xl group-last:rounded-b-2xl"
            {...field}
          />
          <label
            for={`:S${index}:`}
            class="pointer-events-none absolute left-6 top-1/2 -mt-3 origin-left text-base/6 text-neutral-500 transition-all duration-200 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:font-semibold peer-focus:text-neutral-950 peer-[:not(:placeholder-shown)]:-translate-y-4 peer-[:not(:placeholder-shown)]:scale-75 peer-[:not(:placeholder-shown)]:font-semibold peer-[:not(:placeholder-shown)]:text-neutral-950">
            {label}
          </label>
        </div>
      ))
    }
    <div class="group relative z-0 transition-all focus-within:z-10">
      <textarea
        required
        id={`:S${fields.length}:`}
        rows={3}
        placeholder=" "
        class="peer block w-full border border-neutral-300 bg-transparent px-6 pb-4 pt-12 text-base/6 text-neutral-950 ring-4 ring-transparent transition focus:border-neutral-950 focus:outline-none focus:ring-neutral-950/5 group-first:rounded-t-2xl group-last:rounded-b-2xl"
      />
      <label
        for={`:S${fields.length}:`}
        class="pointer-events-none absolute left-6 top-10 -mt-3 origin-left text-base/6 text-neutral-500 transition-all duration-200 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:font-semibold peer-focus:text-neutral-950 peer-[:not(:placeholder-shown)]:-translate-y-4 peer-[:not(:placeholder-shown)]:scale-75 peer-[:not(:placeholder-shown)]:font-semibold peer-[:not(:placeholder-shown)]:text-neutral-950">
        {t("contactForm.fields.message")}
      </label>
    </div>
  </div>
  <button
    class="mt-10 inline-flex rounded-full px-8 py-4 text-sm font-semibold transition bg-neutral-950 text-white hover:bg-neutral-800"
    type="submit">
    <span class="relative top-px">
      {t("contactForm.sendBtn")}
    </span>
  </button>
  <p id="success-msg" class="mt-6 text-green-800 hidden">
    {t("contactForm.successMsg")}
  </p>
</form>
<script>
  const form = document.getElementById("form") as HTMLFormElement;

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const response = await fetch("/api/contact", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const successMsg = document.getElementById("success-msg");
      console.log(successMsg);
      if (successMsg) {
        successMsg.hidden = false;
        // NOTE: not sure to include it, le voy a echar un pensamiento
        // setTimeout(() => (successMsg.hidden = true), 5000);
      }

      form.reset();
    }
  });
</script>

<!-- <div
  class="border border-neutral-300 px-6 py-8 first:rounded-t-2xl last:rounded-b-2xl">
  <fieldset>
    <legend class="text-base/6 text-neutral-500">
      {t("contactForm.fields.project.title")}
    </legend>
    <div class="mt-6 grid grid-cols-1 gap-8 sm:grid-cols-2">
      {
        ["Web", "Custom development", "E-commerce", "Other"].map(
          (label) => (
            <label class="flex gap-x-3">
              <input
                class="h-6 w-6 flex-none appearance-none rounded-full border border-neutral-950/20 outline-none checked:border-[0.5rem] checked:border-neutral-950 focus-visible:ring-1 focus-visible:ring-neutral-950 focus-visible:ring-offset-2"
                type="radio"
                value="25"
                name="budget"
              />
              <span class="text-base/6 text-neutral-950">{label}</span>
            </label>
          ),
        )
      }
    </div>
  </fieldset>
</div> -->